2. Operaciones CRUD

MongoDB es una base de datos open source, NoSQL y basada en documentos que nos permite guardar una gran cantidad información de forma distribuida. Mongo también es el nombre de la compañía que desarrolla el código de esta base de datos. Los drivers de MongoDB son librerías oficiales o desarrolladas por la comunidad que podemos usar para comunicar nuestras aplicaciones con las bases de datos. Una de las más populares es Mongoid, un ORM que convierte nuestros código Ruby en queries que entiende nuestra base de datos.


Bases de datos, Colecciones y Documentos en MongoDB
Las Bases de Datos son los contenedores físicos para nuestras colecciones. Cada base de datos tiene un archivo propio en el sistema de archivos de nuestra computadora o servidor y un Cluster puede tener múltiples bases de datos.

Las Colecciones son agrupaciones de documentos. Son equivalentes a las tablas en bases de datos relacionales pero NO nos imponen un esquema o estructura rígida para guardar información.

Los Documentos son registros dentro de las colecciones. Son la unidad básica de MongoDB y son análogos a los objetos JSON pero en realidad son BSON.
Operaciones CRUD desde la consola de MongoDB
Instrucciones y comandos de la clase:

Conexión con el cluster de MongoDB Atlas: mongo "URL DE NUESTRO CLUSTER", (recuerda añadir tu IP a la lista de IPs permitidas para no tener problemas en esta parte).

Listar las bases de datos de nuestro cluster: show dbs.

Seleccionar una base de datos: use NOMBRE_BD. Debemos crear por lo menos un documento si la base de datos es nueva porque MongoDB no crea bases de datos vacías.

Recordar qué base de datos estamos usando: db.

Listar las colecciones de nuestra base de datos: show collections.

Crear una colección (opcional) y añadir un elemento en formato JSON: db.NOMBRE_COLECCIÓN.insertOne({ ... }). La base de datos responde true si la operación fue exitosa y crea el campo irrepetible de _id si nosotros no lo especificamos.

Crear una colección (opcional) y añadir algunos elementos en formato JSON: db.NOMBRE_COLECCIÓN.insertMany([{ ... }, { ... }]). Recibe un array de elementos y devuelve todos los IDs de los elementos que se crearon correctamente.

Encontrar elementos en una colección: db.NOMBRE_COLECCIÓN.find() Podemos aplicar filtros si queremos o encontrar solo el primer resultado con el método findOne().

Listar todos los posibles comandos que podemos ejecutar: db.NOMBRE_COLECCIÓN.help().



3. ESQUEMAS Y RELACIONES 
Clase 14: Tipos de datos
    Strings: Nos sirven para guardar textos.
    Boolean: Información cierta o falsa (true y false).
    ObjectId: Utilizan el tiempo exacto en el que generamos la consulta para siempre generan IDs únicos. Existen en BSON pero no en JSON.
    Date: Nos sirven para guardar fechas y hacer operaciones de rangos entre ellas.
    Números: Doubles, Integers, Integers 64 bits y Decimals.
    Documentos Embebidos: Documentos dentro de otros documentos ({}).
    Arrays: Arreglos o listas de cualquier otro tipo de datos, incluso, de otras listas.

Clase 15: ¿Qué son los esquemas y las relaciones?
    Los esquemas son la forma en que organizamos nuestros documentos en nuestras colecciones. MongoDB no impone ningún esquema pero podemos seguir buenas prácticas y estructurar nuestros documentos de forma parecida (no igual) para aprovechar la flexibilidad y escalabilidad de la base de datos sin aumentar la complejidad de nuestras aplicaciones.

    Las relaciones son la forma en que nuestras entidades o documentos sen encuentran enlazados unos con otros. Por ejemplo: Una carrera tiene multiples cursos y cada curso tiene multiples clases.

Claser 16: Relaciones entre documentos
    Las documentos embebidos nos ayudan a guardar la información en un solo documento y nos ahorra el tiempo que tardamos en consultar diferentes documentos a partir de referencias. Sin embargo, las referencias siguen siendo muy importantes cuando debemos actualizar información en diferentes lugares de forma continua.

4. Profundización de queries dentro de MongoDB
Operadores para realizar queries y proyecciones
    
Operadores para arreglo.
    $all: Arreglos que contengan todos los elementos de la query.
    $elementMatch: Documentos que cumplen la condición del $elementMatch en uno de sus elementos.
    $size: Documentos que contienen un capo tipo arreglo de un tamaño específico.

Operadores por elemento.
    $exist: Documentos que cuentan con un campo específico.
    $type: Documentos que cuentan con un campo de un tipo específico.

Operadores lógicos.
    $and: Une queries con un and lógico.
    $not: Invierte el efecto de un query.
    $nor: Une queries con un nor lógico.
    $or: Une queries con un or lógico.

Operadores de comparación en MongoDB.
    $eq: Igual ‘=’.
    $gt: Mayor ‘>’.
    $gte: Mayor o igual ‘>=’.
    $lt: Menor ‘<’.
    $lte: Menor o igual ‘<=’.
    $ne: Diferente ‘!=’.
    $in: Valores dentro de un arreglo.
    $nin: Valores que no están dentro de un arreglo.

